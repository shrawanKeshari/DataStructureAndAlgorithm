Problem Statement
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


Solution

class Solution {
    public int[][] merge(int[][] intervals) {
        Stack<Integer> st = new Stack<Integer>();
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(final int[] a, final int[] b){
                if(a[0] > b[0]){
                    return 1;
                }else if(a[0] < b[0]){
                    return -1;
                }else{
                    return 0;
                }
            }
        });

        int len = intervals.length;

        st.push(intervals[0][0]);
        st.push(intervals[0][1]);
        int i = 1;
        while(i < len){
            if(st.peek() >= intervals[i][0] && st.peek() < intervals[i][1]){
                st.pop();
                st.push(intervals[i][1]);
            }else if(st.peek() < intervals[i][0]){
                st.push(intervals[i][0]);
                st.push(intervals[i][1]);
            }
            i++;
        }

        int stSize = st.size();

        stSize = stSize/2;

        int[][] result = new int[stSize][2];
        i = 0;
        while(!st.isEmpty()){
            result[i][1] = st.pop();
            result[i][0] = st.pop();
            i++;
        }

        return result;
    }
}
