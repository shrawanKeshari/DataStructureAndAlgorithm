Problem Description
You are given an array A of N integers and an integer B. Count the number of pairs (i,j) such that A[i] + A[j] = B and i â‰  j. Since the answer can be very large, return the remainder after dividing the count with 109+7.

Note - The pair (i,j) is same as the pair (j,i) and we need to count it only once.


Problem Constraints
1 <= N <= 105
1 <= A[i] <= 109
1 <= B <= 109


Input Format
First argument A is an array of integers and second argument B is an integer.


Output Format
Return an integer.


Example Input
Input 1:

A = [3, 5, 1, 2]
B = 8
Input 2:

A = [1, 2, 1, 2]
B = 3


Example Output
Output 1:

1
Output 2:

4


Example Explanation
Example 1:

The only pair is (1, 2) which gives sum 8
Example 2:

The pair which gives sum as 3 are (1, 2), (1, 4), (2, 3) and (3, 4). 





Solution

public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int len = A.size();
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        long count = 0;

        for(int i = 0; i < len; i++){
            int curr_ele = A.get(i);
            int diff = B-curr_ele;
            if(map.containsKey(diff)){
                int curr_count = map.get(diff);
                count = (count%1000000007 + curr_count%1000000007)%1000000007;
            }
            if(map.containsKey(curr_ele)){
                int curr_count = map.get(curr_ele);
                map.put(curr_ele, curr_count+1);
            }else{
                map.put(curr_ele, 1);
            }
        }

        return (int)(count%1000000007);
    }
}
