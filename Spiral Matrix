Problem Statement

Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


Solution

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int r = matrix.length;
        int c = matrix[0].length;
        List<Integer> result = new ArrayList<Integer>();

        int x = 0, y = 0;

        while(x<r && y<c){
            for(int i = y; i < c; i++){
                result.add(matrix[x][i]);
            }
            x++;
            
            for(int i = x; i < r; i++){
                result.add(matrix[i][c-1]);
            }
            c--;

            if(x < r){
                for(int i = c-1; i >= y; i--){
                    result.add(matrix[r-1][i]);
                }
                r--;
            }

            if(y < c){
                for(int i = r-1; i >= x; i--){
                    result.add(matrix[i][y]);
                }
                y++;
            }
        }

        return result;
    }
}
