Problem Description
Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.



Problem Constraints
1 <= |A| <= 100000



Input Format
First and only argument is the vector A



Output Format
Return one integer, the answer to the question



Example Input
Input 1:

A = [0, 1, 0, 2]
Input 2:

A = [1, 2]


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

1 unit is trapped on top of the 3rd element.
Explanation 2:

No water is trapped.




Solution

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int trap(final List<Integer> A) {
        int len = A.size();
        int[] left = new int[len];
        int[] right = new int[len];

        left[0] = A.get(0);
        for(int i = 1; i < len; i++){
            if(A.get(i) > left[i-1]){
                left[i] = A.get(i);
            }else{
                left[i] = left[i-1];
            }
        }

        right[len-1] = A.get(len-1);
        for(int i = len-2; i >=0; i--){
            if(A.get(i) > right[i+1]){
                right[i] = A.get(i);
            }else{
                right[i] = right[i+1];
            }
        }

        int ans = 0;

        for(int i = 0; i < len; i++){
            ans = ans + Math.min(left[i], right[i])-A.get(i);
        }

        return ans;
    }
}
