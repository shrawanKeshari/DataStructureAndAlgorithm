Problem Description
Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:
A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

Incase of conflict, return the substring which occurs first ( with the least starting index).



Problem Constraints
1 <= N <= 6000



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the longest palindromic substring of string A.



Example Input
Input 1:
A = "aaaabaaa"
Input 2:
A = "abba


Example Output
Output 1:
"aaabaaa"
Output 2:
"abba"


Example Explanation
Explanation 1:
We can see that longest palindromic substring is of length 7 and the string is "aaabaaa".
Explanation 2:
We can see that longest palindromic substring is of length 4 and the string is "abba".




Solution

public class Solution {
    public String longestPalindrome(String A) {
        int len = A.length();

        if(len == 1){
            return A;
        }

        if(len == 2){
            if(A.charAt(0) == A.charAt(1)){
                return A;
            }else{
                return String.valueOf(A.charAt(0));
            }
        }

        int start = 0;
        int end = 0;
        int ans = Integer.MIN_VALUE;

        for(int i = 1; i < len-1; i++){
            int left = i-1;
            int right = i+1;
            int count = 1;
            while(left>=0 && right<=len-1){
                if(A.charAt(left) == A.charAt(right)){
                    left--;
                    right++;
                    count = count+2;
                }else{
                    break;
                }
            }

            int left2 = i-1;
            int right2 = i+2;
            int count2 = 0;
            if(A.charAt(i) == A.charAt(i+1)){
                count2 = 2;
                while(left2>=0 && right2<=len-1){
                    if(A.charAt(left2) == A.charAt(right2)){
                        left2--;
                        right2++;
                        count2 = count2+2;
                    }else{
                        break;
                    }
                }
            }

            if(count > ans){
                ans = count;
                start = left+1;
                end = right-1;
            }
            if(count2 > ans){
                ans = count2;
                start = left2+1;
                end = right2-1;
            }
        }

        StringBuilder result = new StringBuilder();
        for(int i = start; i <= end; i++){
            result.append(A.charAt(i));
        }

        return result.toString();
    }
}
